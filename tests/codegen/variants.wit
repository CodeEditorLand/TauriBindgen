interface variants {
  enum e1 {
      a,
  }

  func e1-arg(x: e1)
  func e1-result() -> e1

  union u1 {
      u32,
      float32,
  }

  func u1-arg(x: u1)
  func u1-result() -> u1

  record empty {}

  variant v1 {
      a,
      b(u1),
      c(e1),
      d(string),
      e(empty),
      f,
      g(u32),
  }

  func v1-arg(x: v1)
  func v1-result() -> v1

  func bool-arg(x: bool)
  func bool-result() -> bool

  func option-arg(
    a: option<bool>,
    b: option<tuple<>>,
    c: option<u32>,
    d: option<e1>,
    e: option<float32>,
    f: option<u1>,
    g: option<option<bool>>,
  )
  func option-result() -> tuple<
    option<bool>,
    option<tuple<>>,
    option<u32>,
    option<e1>,
    option<float32>,
    option<u1>,
    option<option<bool>>,
  >

  variant casts1 {
    a(s32),
    b(float32),
  }

  variant casts2 {
    a(float64),
    b(float32),
  }

  variant casts3 {
    a(float64),
    b(u64),
  }

  variant casts4 {
    a(u32),
    b(s64),
  }

  variant casts5 {
    a(float32),
    b(s64),
  }

  variant casts6 {
    a(tuple<float32, u32>),
    b(tuple<u32, u32>),
  }

  func casts(
    a: casts1,
    b: casts2,
    c: casts3,
    d: casts4,
    e: casts5,
    f: casts6,
  ) -> tuple<
    casts1,
    casts2,
    casts3,
    casts4,
    casts5,
    casts6,
  >

  func result-arg(
    a: result,
    b: result<_, e1>,
    c: result<e1>,
    d: result<tuple<>, tuple<>>,
    e: result<u32, v1>,
    f: result<string, list<u8>>,
  )
  func result-result() -> tuple<
    result,
    result<_, e1>,
    result<e1>,
    result<tuple<>, tuple<>>,
    result<u32, v1>,
    result<string, list<u8>>,
  >

  enum my-errno {
    bad1,
    bad2,
  }

  func return-result-sugar() -> result<s32, my-errno>
  func return-result-sugar2() -> result<_, my-errno>
  func return-result-sugar3() -> result<my-errno, my-errno>
  func return-result-sugar4() -> result<tuple<s32, u32>, my-errno>
  func return-option-sugar() -> option<s32>
  func return-option-sugar2() -> option<my-errno>

  func result-simple() -> result<u32, s32>

  record is-clone {
    v1: v1,
  }

  func is-clone-arg(a: is-clone)
  func is-clone-return() -> is-clone

  func return-named-option() -> (a: option<u8>)
  func return-named-result() -> (a: result<u8, my-errno>)
}
