pub mod roundtrip { # [derive (tauri_bindgen_abi :: Writable)] pub struct AggregatesParam < 'a > { a : Scalars , b : u32 , c : Empty , d : & 'a str , e : ReallyFlags } # [derive (tauri_bindgen_abi :: Readable)] pub struct AggregatesResult { a : Scalars , b : u32 , c : Empty , d : String , e : ReallyFlags } # [derive (tauri_bindgen_abi :: Writable , tauri_bindgen_abi :: Readable)] pub enum AllFloats { F32 (f32) , F64 (f64) } # [derive (tauri_bindgen_abi :: Writable , tauri_bindgen_abi :: Readable)] pub enum AllIntegers { Bool (bool) , U8 (u8) , U16 (u16) , U32 (u32) , U64 (u64) , I8 (i8) , I16 (i16) , S32 (i32) , S64 (i64) } # [derive (tauri_bindgen_abi :: Writable)] pub enum AllTextParam < 'a > { Char (char) , String (& 'a str) } # [derive (tauri_bindgen_abi :: Readable)] pub enum AllTextResult { Char (char) , String (String) } # [derive (tauri_bindgen_abi :: Writable , tauri_bindgen_abi :: Readable)] pub enum DuplicateTypes { U80 (u8) , U81 (u8) , U82 (u8) } # [derive (tauri_bindgen_abi :: Writable , tauri_bindgen_abi :: Readable)] pub enum E1 { A } # [derive (tauri_bindgen_abi :: Writable , tauri_bindgen_abi :: Readable)] pub struct Empty { } bitflags :: bitflags ! { pub struct Flag1 : u8 { const B0 = 1 << 0 ; } } bitflags :: bitflags ! { pub struct Flag16 : u16 { const B0 = 1 << 0 ; const B1 = 1 << 1 ; const B2 = 1 << 2 ; const B3 = 1 << 3 ; const B4 = 1 << 4 ; const B5 = 1 << 5 ; const B6 = 1 << 6 ; const B7 = 1 << 7 ; const B8 = 1 << 8 ; const B9 = 1 << 9 ; const B10 = 1 << 10 ; const B11 = 1 << 11 ; const B12 = 1 << 12 ; const B13 = 1 << 13 ; const B14 = 1 << 14 ; const B15 = 1 << 15 ; } } bitflags :: bitflags ! { pub struct Flag2 : u8 { const B0 = 1 << 0 ; const B1 = 1 << 1 ; } } bitflags :: bitflags ! { pub struct Flag32 : u32 { const B0 = 1 << 0 ; const B1 = 1 << 1 ; const B2 = 1 << 2 ; const B3 = 1 << 3 ; const B4 = 1 << 4 ; const B5 = 1 << 5 ; const B6 = 1 << 6 ; const B7 = 1 << 7 ; const B8 = 1 << 8 ; const B9 = 1 << 9 ; const B10 = 1 << 10 ; const B11 = 1 << 11 ; const B12 = 1 << 12 ; const B13 = 1 << 13 ; const B14 = 1 << 14 ; const B15 = 1 << 15 ; const B16 = 1 << 16 ; const B17 = 1 << 17 ; const B18 = 1 << 18 ; const B19 = 1 << 19 ; const B20 = 1 << 20 ; const B21 = 1 << 21 ; const B22 = 1 << 22 ; const B23 = 1 << 23 ; const B24 = 1 << 24 ; const B25 = 1 << 25 ; const B26 = 1 << 26 ; const B27 = 1 << 27 ; const B28 = 1 << 28 ; const B29 = 1 << 29 ; const B30 = 1 << 30 ; const B31 = 1 << 31 ; } } bitflags :: bitflags ! { pub struct Flag4 : u8 { const B0 = 1 << 0 ; const B1 = 1 << 1 ; const B2 = 1 << 2 ; const B3 = 1 << 3 ; } } bitflags :: bitflags ! { pub struct Flag64 : u64 { const B0 = 1 << 0 ; const B1 = 1 << 1 ; const B2 = 1 << 2 ; const B3 = 1 << 3 ; const B4 = 1 << 4 ; const B5 = 1 << 5 ; const B6 = 1 << 6 ; const B7 = 1 << 7 ; const B8 = 1 << 8 ; const B9 = 1 << 9 ; const B10 = 1 << 10 ; const B11 = 1 << 11 ; const B12 = 1 << 12 ; const B13 = 1 << 13 ; const B14 = 1 << 14 ; const B15 = 1 << 15 ; const B16 = 1 << 16 ; const B17 = 1 << 17 ; const B18 = 1 << 18 ; const B19 = 1 << 19 ; const B20 = 1 << 20 ; const B21 = 1 << 21 ; const B22 = 1 << 22 ; const B23 = 1 << 23 ; const B24 = 1 << 24 ; const B25 = 1 << 25 ; const B26 = 1 << 26 ; const B27 = 1 << 27 ; const B28 = 1 << 28 ; const B29 = 1 << 29 ; const B30 = 1 << 30 ; const B31 = 1 << 31 ; const B32 = 1 << 32 ; const B33 = 1 << 33 ; const B34 = 1 << 34 ; const B35 = 1 << 35 ; const B36 = 1 << 36 ; const B37 = 1 << 37 ; const B38 = 1 << 38 ; const B39 = 1 << 39 ; const B40 = 1 << 40 ; const B41 = 1 << 41 ; const B42 = 1 << 42 ; const B43 = 1 << 43 ; const B44 = 1 << 44 ; const B45 = 1 << 45 ; const B46 = 1 << 46 ; const B47 = 1 << 47 ; const B48 = 1 << 48 ; const B49 = 1 << 49 ; const B50 = 1 << 50 ; const B51 = 1 << 51 ; const B52 = 1 << 52 ; const B53 = 1 << 53 ; const B54 = 1 << 54 ; const B55 = 1 << 55 ; const B56 = 1 << 56 ; const B57 = 1 << 57 ; const B58 = 1 << 58 ; const B59 = 1 << 59 ; const B60 = 1 << 60 ; const B61 = 1 << 61 ; const B62 = 1 << 62 ; const B63 = 1 << 63 ; } } bitflags :: bitflags ! { pub struct Flag8 : u8 { const B0 = 1 << 0 ; const B1 = 1 << 1 ; const B2 = 1 << 2 ; const B3 = 1 << 3 ; const B4 = 1 << 4 ; const B5 = 1 << 5 ; const B6 = 1 << 6 ; const B7 = 1 << 7 ; } } # [derive (tauri_bindgen_abi :: Writable)] pub struct OtherRecordParam < 'a > { a1 : u32 , a2 : u64 , a3 : i32 , a4 : i64 , b : & 'a str , c : & 'a [u8] } # [derive (tauri_bindgen_abi :: Readable)] pub struct OtherRecordResult { a1 : u32 , a2 : u64 , a3 : i32 , a4 : i64 , b : String , c : Vec < u8 > } # [doc = "A record that is really just flagsAll of the fields are bool"] # [derive (tauri_bindgen_abi :: Writable , tauri_bindgen_abi :: Readable)] pub struct ReallyFlags { a : bool , b : bool , c : bool , d : bool , e : bool , f : bool , g : bool , h : bool , i : bool } # [doc = "A record containing two scalar fieldsthat both have the same type"] # [derive (tauri_bindgen_abi :: Writable , tauri_bindgen_abi :: Readable)] pub struct Scalars { # [doc = "The first field, named a"] a : u32 , # [doc = "The second field, named b"] b : u32 } # [derive (tauri_bindgen_abi :: Writable)] pub struct SomeRecord < 'a > { x : & 'a str , y : OtherRecordParam < 'a > , z : & 'a [OtherRecordParam < 'a >] , c1 : u32 , c2 : u64 , c3 : i32 , c4 : i64 } # [derive (tauri_bindgen_abi :: Writable , tauri_bindgen_abi :: Readable)] pub enum U1 { U32 (u32) , F32 (f32) } # [derive (tauri_bindgen_abi :: Writable)] pub enum V1Param < 'a > { A , B (U1) , C (E1) , D (& 'a str) , E (Empty) , F , G (u32) } # [derive (tauri_bindgen_abi :: Readable)] pub enum V1Result { A , B (U1) , C (E1) , D (String) , E (Empty) , F , G (u32) } pub async fn empty (x : Empty) -> Empty { todo ! () } pub async fn record_scalars (val : Scalars) -> Scalars { todo ! () } pub async fn record_really_flags (val : ReallyFlags) -> ReallyFlags { todo ! () } pub async fn record_aggregates (val : AggregatesParam < '_ >) -> AggregatesResult { todo ! () } pub async fn flag1 (x : Flag1) -> Flag1 { todo ! () } pub async fn flag2 (x : Flag2) -> Flag2 { todo ! () } pub async fn flag4 (x : Flag4) -> Flag4 { todo ! () } pub async fn flag8 (x : Flag8) -> Flag8 { todo ! () } pub async fn flag16 (x : Flag16) -> Flag16 { todo ! () } pub async fn flag32 (x : Flag32) -> Flag32 { todo ! () } pub async fn flag64 (x : Flag64) -> Flag64 { todo ! () } pub async fn float32 (x : f32) -> f32 { todo ! () } pub async fn float64 (x : f64) -> f64 { todo ! () } pub async fn u8 (x : u8) -> u8 { todo ! () } pub async fn s8 (x : i8) -> i8 { todo ! () } pub async fn u16 (x : u16) -> u16 { todo ! () } pub async fn s16 (x : i16) -> i16 { todo ! () } pub async fn u32 (x : u32) -> u32 { todo ! () } pub async fn s32 (x : i32) -> i32 { todo ! () } pub async fn u64 (x : u64) -> u64 { todo ! () } pub async fn s64 (x : i64) -> i64 { todo ! () } pub async fn list_u8 (x : & '_ [u8]) -> Vec < u8 > { todo ! () } pub async fn list_u16 (x : & '_ [u16]) -> Vec < u16 > { todo ! () } pub async fn list_u32 (x : & '_ [u32]) -> Vec < u32 > { todo ! () } pub async fn list_u64 (x : & '_ [u64]) -> Vec < u64 > { todo ! () } pub async fn list_s8 (x : & '_ [i8]) -> Vec < i8 > { todo ! () } pub async fn list_s16 (x : & '_ [i16]) -> Vec < i16 > { todo ! () } pub async fn list_s32 (x : & '_ [i32]) -> Vec < i32 > { todo ! () } pub async fn list_s64 (x : & '_ [i64]) -> Vec < i64 > { todo ! () } pub async fn list_float32 (x : & '_ [f32]) -> Vec < f32 > { todo ! () } pub async fn list_float64 (x : & '_ [f64]) -> Vec < f64 > { todo ! () } pub async fn tuple_list (x : & '_ [(u8 , i8)]) -> Vec < (u8 , i8) > { todo ! () } pub async fn string_list (a : & '_ [& '_ str]) -> Vec < String > { todo ! () } pub async fn tuple_string_list (x : & '_ [(u8 , & '_ str)]) -> Vec < (u8 , String) > { todo ! () } pub async fn record_list (x : & '_ [SomeRecord < '_ >]) -> Vec < OtherRecordResult > { todo ! () } pub async fn all_integers (x : AllIntegers) -> AllIntegers { todo ! () } pub async fn all_floats (x : AllFloats) -> AllFloats { todo ! () } pub async fn all_text (x : AllTextParam < '_ >) -> AllTextResult { todo ! () } pub async fn e1 (x : E1) -> E1 { todo ! () } pub async fn v1 (x : V1Param < '_ >) -> V1Result { todo ! () } pub async fn options (a : Option < bool > , b : Option < () > , c : Option < u32 > , d : Option < E1 > , e : Option < f32 > , f : Option < U1 > , g : Option < Option < bool > >) -> (Option < bool > , Option < () > , Option < u32 > , Option < E1 > , Option < f32 > , Option < U1 > , Option < Option < bool > >) { todo ! () } pub async fn results (a : Result < () , () > , b : Result < () , E1 > , c : Result < E1 , () > , d : Result < () , () > , e : Result < u32 , V1Param < '_ > > , f : Result < & '_ str , & '_ [u8] >) -> (Result < () , () > , Result < () , E1 > , Result < E1 , () > , Result < () , () > , Result < u32 , V1Result > , Result < String , Vec < u8 > >) { todo ! () } pub async fn duplicate_types (a : DuplicateTypes) -> DuplicateTypes { todo ! () } }